<?php
/**
 * PP_Toolkit_Campaign_Submission Class.
 *
 * @class       PP_Toolkit_Campaign_Submission
 * @version     1.0
 * @author lafif <hello@lafif.me>
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}

/**
 * PP_Toolkit_Campaign_Submission class.
 */
class PP_Toolkit_Campaign_Submission {

    private $campaign;

    /**
     * Singleton method
     *
     * @return self
     */
    public static function init() {
        static $instance = false;

        if ( ! $instance ) {
            $instance = new PP_Toolkit_Campaign_Submission();
        }

        return $instance;
    }

    /**
     * Constructor
     */
    public function __construct() {
        $this->includes();
        
        add_action( 'charitable_start', array($this, 'init_pp_campaign_fields'), 10, 1 );

        add_action( 'wp_enqueue_scripts', array($this, 'enqueue_submission_script') );
        add_filter( 'charitable_form_field_template', array($this, 'custom_form_field_template'), 10, 2 );

        /**
         * Modify default fields
         */
        add_filter('charitable_campaign_submission_campaign_fields', array($this, 'customise_campaign_fields'), 10, 2);
        add_filter('charitable_campaign_submission_user_fields', array($this, 'customise_user_fields'), 10, 2);
        add_filter('charitable_campaign_submission_core_data', array($this, 'campaign_core_date'), 10, 3);

        // fix for end date not saving when update campaign from front end, because field length already unset
        add_filter( 'charitable_campaign_submission_fields_map', array( $this, 'save_end_date' ), 10, 2 );

        add_filter('charitable_campaign_submission_fields', array($this, 'addon_section'), 100, 3);
        
    }

    public function init_pp_campaign_fields(Charitable $charitable){

        $campaign_fields = apply_filters( 'pp_custom_campaign_fields', array(
            'PP_Merchandise' => PP_Toolkit()->get_path('includes') . '/campaign-fields/class-pp-merchandise.php',
        ) );

        foreach ($campaign_fields as $class_name => $path) {
            if(!file_exists($path))
                continue;

            include_once( $path );
            $class_name::init();
        }

    }

    public function enqueue_submission_script(){

        if( !charitable_is_page( 'campaign_submission_page' ) )
            return;

        wp_enqueue_style( 'pp-toolkit' );
        wp_enqueue_script( 'cropit' );
        wp_enqueue_script( 'pp-toolkit-campaign-submission' );
        wp_localize_script( 'pp-toolkit-campaign-submission', 'PP_TOOLKIT_SUBMISSION', apply_filters( 'pp_toolkit_submission_vars', array(
            'ajax_url' => PP_Toolkit()->ajax_url()
        ) ) );
    }

    public function custom_form_field_template($template, $field){
        $our_tempalates = pp_custom_form_field_template();
        if(in_array($field['type'], $our_tempalates )){
            $template_name = 'form-fields/' . $field['type'] . '.php';
            $template = new Philanthropy_Charitable_Template( $template_name, false );
        }

        return $template;
    }

    public function customise_campaign_fields($fields, $form) {
        if(isset($fields['length'])) 
            unset($fields['length']);

        if(isset($fields['campaign_category'])) 
            unset($fields['campaign_category']);

        // $fields['campaign_category']['required'] = false;
        
        if(isset($fields['post_title'])){
            $fields['post_title']['placeholder'] = "Also used to generate your campaign page URL (greeks4good.com/campaigns/campaign-name).";
        }

        if(isset($fields['goal'])){
            $fields['goal']['label'] = __('Fundraising Goal (enter a numerical value without "$").', 'pp-toolkit');
            $fields['goal']['required'] = true;
            $fields['goal']['fullwidth'] = true;
            $fields['goal']['priority'] = 2;
        }

        if(isset($fields['image'])){
            $fields['image']['required'] = true;
            $fields['image']['label'] = __('Featured Image (.jpg, .gif or .png). Ideal size is 600px wide by 300px high.', 'pp-toolkit');
            $fields['image']['type'] = 'image-crop';
            $fields['image']['height'] = 200;
            $fields['image']['width'] = 600;
            $fields['image']['export-zoom'] = 2;
        }

        if(isset($fields['video'])){
            $fields['video']['label'] = __('Featured Video (enter the video URL: https://youtu.be/videoID or https://vimeo.com/videoID).', 'pp-toolkit');
            $fields['video']['placeholder'] = "";
        }

        if(isset($fields['description'])){
            $fields['description']['placeholder'] = "A short description of your campaign that appears at the top of your campaign page (no paragraphs).";
        }

        // if(isset($fields['post_date'])){
            $fields['post_date'] = [
                'label'         => __('Start Date', 'pp-toolkit'),
                'type'          => 'datepicker',
                'priority'      => 9,
                'required'      => true,
                'fullwidth'     => false,
                'value'         => $this->get_field_value('post_date'),
                'data_type'     => 'core',
                'editable'      => true
            ];
        // }

        // if(isset($fields[ 'end_date' ])){
            $fields[ 'end_date' ] = [
                'label'         => __( 'End Date', 'pp-toolkit' ), 
                'type'          => 'datepicker',
                'priority'      => 9.1, 
                'required'      => true,
                'fullwidth'     => false,
                'value'         => $this->get_field_value('end_date'),
                //'value'       => date( 'F j, Y', strtotime($this->get_campaign()->get( 'end_date' ))), //works from db
                //'value'       => $this->get_campaign()->get( '_campaign_end_date' ),
                //'value'       => $form->get_campaign_value( 'end_date' ),
                'data_type'     => 'core',
                'editable'      => true
            ];
        // }

        // echo "<pre>";
        // print_r($fields);
        // echo "</pre>";
        
        
        if ( $form->get_campaign() ) {
            //$fields[ 'end_date' ][ 'value' ] = date( 'm/d/y', strtotime( $this->get_campaign()->get( 'end_date' ) ) );
        }

        return $fields;
        
    }

    /**
     * Customises the user fields.
     *
     * @param   array[]                      $fields
     * @param   Charitable_FES_Campaign_Form $form
     *
     * @return  array[]
     * @access  public
     * @since   1.0.0
     */
    public function customise_user_fields($fields, $form) {
        
        unset( $fields[ 'city' ] );
        unset( $fields[ 'state' ] );
        unset( $fields[ 'country' ] );
        
        /* GUM New Custom Field */
        $fields[ 'chapter' ] = array(
            'label'         => __( 'Fraternity/Sorority Name', 'pp-toolkit' ),
            'type'          => 'text',
            'required'      => true, 
            'fullwidth'     => false,
            //'rows'          => 4,//use with textarea
            'priority'      => 53,
            'value'         => $form->get_user_value('chapter'),
            'content'       => __( 'Fraternity/Sorority Name', 'pp-toolkit' ),
            'data_type'     => 'user'
        );
        
        $fields['organisation']['label'] = 'University/College';
        $fields['organisation']['required'] = true;
        $fields['organisation']['priority'] = 53;
        
        $fields[ 'avatar' ][ 'priority' ] = 56;

        /* GUM Edit */
        $fields['user_description']['label'] = __('About Your Chapter', 'pp-toolkit');
        $fields['user_description']['placeholder'] = " ";
        $fields['user_description']['priority'] = 57;
        $fields['user_description']['fullwidth'] = true;

        $fields['referral_source'] = [
            'label'     => __('How did you hear about us?', 'pp-toolkit'),
            'type'      => 'text',
            'priority'  => 58,
            'required'  => false,
            'value'     => $form->get_user_value('referral_source'),
            'data_type' => 'user'
        ];

        return $fields;
    }

    /**
     * Filter core campaign data before saving.
     *
     * @param   array $values
     * @param   int   $user_id
     * @param   array $submitted
     *
     * @return  array
     * @access  public
     * @since   1.0.0
     */
    public function campaign_core_date($values, $user_id, $submitted) {
        if (isset($submitted['post_date'])) {
            $values['post_date'] = date('Y-m-d 00:00:00', strtotime($submitted['post_date']));
            $values['edit_date'] = $values['post_date'];
            //$values['end_date'] = date('Y-m-d 00:00:00', strtotime($submitted['end_date']));
            $values['post_date_gmt'] = get_gmt_from_date($values['post_date']);
        }

        return $values;
    }

    /**
     * Add end_date to the campaign meta fields to be saved.
     * 
     */
    public function save_end_date( $fields, $submitted ) {

        /* If the campaign is already published and
         * a length is not submitted, we're not changing
         * the end date.
         */
        // if ( ! $context['is_already_published'] || array_key_exists( 'length', $submitted ) ) {
            $fields['meta']['end_date'] = 'date';
        // }

        return $fields;
    }

    /**
     * Add the EDD product and event sections to the campaign form.
     *
     * @param   array                        $sections
     * @param   Charitable_FES_Campaign_Form $form
     *
     * @return  array
     * @access  public
     * @since   1.0.0
     */
    public function addon_section($sections, $form) {

        if(isset($sections[ 'payment_fields' ])){
            unset( $sections[ 'payment_fields' ] );
        }


        // $sections['merchandise_fields'] = [
        //     'legend'   => __('Merchandise', 'pp-toolkit'),
        //     'type'     => 'fieldset',
        //     'priority' => 50,
        //     'page'     => 'campaign_details',
        //     'fields'   => [
        //         'explanation' => [
        //             'type'     => 'paragraph',
        //             'content'  => __('You can sell <strong>merchandise</strong> to raise money for your campaign goal.', 'pp-toolkit'),
        //             'priority' => 32
        //         ],
        //         'merchandise' => [
        //             'type'     => 'merchandise',
        //             'priority' => 34,
        //             'value'    => $this->get_merchandise()
        //         ]
        //     ]
        // ];

        $sections['event_fields'] = [
            'legend'   => __('Events', 'pp-toolkit'),
            'type'     => 'fieldset',
            'priority' => 55,
            'page'     => 'campaign_details',
            'fields'   => [
                'explanation' => [
                    'type'     => 'paragraph',
                    'content'  => __('You can create <strong>events</strong> and sell tickets to raise money for your campaign goal.', 'pp-toolkit'),
                    'priority' => 42
                ],
                'event'       => [
                    'type'     => 'event',
                    'priority' => 44,
                    'value'    => $this->get_events()
                ]
            ]
        ];

        $sections['volunteers_need'] = [
            'legend'   => 'VOLUNTEERS',
            'type'     => 'fieldset',
            'priority' => 56,
            'page'     => 'campaign_details',
            'fields'   => [
                'explanation' => [
                    'type'     => 'paragraph',
                    'content'  => __('You can recruit and organize participants to help with specific tasks through out your campaign. You receive emails from interested participants.', 'pp-toolkit'),
                    'priority' => 50
                ],
                'volunteers'  => [
                    'type'     => 'volunteers',
                    'priority' => 50,
                    'value'    => $this->get_field_value('volunteers'),
                ]
            ]
        ];
        
        //* GUM - code edit 
        $sections['payout_fields'] = [
            'legend'   => 'PAYOUT',
            'type'     => 'fieldset',
            'priority' => 57,
            'page'     => 'campaign_details',
            'fields'   => [
                'explanation' => [
                    'type'     => 'paragraph',
                    'content'  => __('Enter your campaign payout recipient information.', 'pp-toolkit'),
                    'priority' => 50
                ],
                /*
                'recipient'  => [
                    'type'     => 'recipient',
                    'priority' => 50,
                    'value'    => $this->get_field_value('payout'),
                ]
                */
                'payout_payable_name' => [
                    'label'         => __('Make check payable to:', 'pp-toolkit') ,
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => true,
                    'value'         => $form->get_campaign_value( 'payout_payable_name' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_email' => [
                    'label'         => __('Email Address', 'pp-toolkit') ,
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_email' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_blank' => [
                    'label'         => __('') ,
                    'type'          => 'hidden',
                    'priority'      => 43,
                    //'required'    => false,
                    //'fullwidth'     => true,
                    //'value'       => $form->get_campaign_value( 'payout_email' ),
                    //'data_type'   => 'meta',
                    //'editable'    => true
                ],
                
                'payout_first_name' => [
                    'label'         => __('First Name', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_first_name' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_last_name' => [
                    'label'         => __('Last Name', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_last_name' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_address' => [
                    'label'         => __('Address', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_address' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_address2' => [
                    'label'         => __('Address 2', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_address2' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_city' => [
                    'label'         => __('City', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_city' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_state' => [
                    'label'         => __('State', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_state' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_zipcode' => [
                    'label'         => __('Zip Code', 'pp-toolkit'),
                    'type'          => 'text',
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_zipcode' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                'payout_country' => [
                    'label'         => __('Country', 'pp-toolkit'),
                    'type'          => 'select',
                    'options'       => charitable_get_location_helper()->get_countries(), 
                    'priority'      => 43,
                    'required'      => false,
                    'fullwidth'     => false,
                    'value'         => $form->get_campaign_value( 'payout_country' ),
                    'data_type'     => 'meta',
                    'editable'      => true
                ],
                
                
                
            ]
        ];


        return $sections;
    }

    /**
     * Return the current user's Charitable_User object.
     *
     * @return  Charitable_User
     * @access  public
     * @since   1.0.0
     */
    public function get_user() {
        if (!isset($this->user)) {
            $this->user = new Charitable_User(wp_get_current_user());
        }

        return $this->user;
    }

    /**
     * Return the current campaign's Charitable_Campaign object.
     *
     * @return  Charitable_Campaign|false
     * @access  public
     * @since   1.0.0
     */
    public function get_campaign() {
        if (!isset($this->campaign)) {
            $campaign_id = get_query_var('campaign_id', false);

            $this->campaign = $campaign_id ? new Charitable_Campaign($campaign_id) : false;
        }

        return $this->campaign;
    }

    /**
     * Return any events that have been created that are linked to this campaign.
     *
     * @return  array       Empty array if no events.
     * @access  public
     * @since   1.0.0
     */
    public function get_events() {
        /**
         * If the submitted data was set in the session, grab it.
         */
        if (is_array(charitable_get_session()->get('submitted_events'))) {
            $submitted = charitable_get_session()->get('submitted_events');

            charitable_get_session()->set('submitted_events', false);
        } /**
         * Otherwise check in the $_POST array.
         */
        elseif (isset($_POST['event'])) {
            $submitted = $_POST['event'];
        }

        if (isset($submitted)) {
            $events = [];

            foreach ($submitted as $event) {
                $events[] = ['POST' => $event];
            }

            return $events;
        }

        if (false === $this->get_campaign()) {
            return [];
        }

        $events = get_post_meta($this->get_campaign()->ID, '_campaign_events', true);

        if (!is_array($events)) {
            $events = [$events];
        }

        return $events;
    }

    /**
     * Return the value for a particular field.
     *
     * @param   string $key
     *
     * @return  mixed
     * @access  public
     * @since   1.0.0
     */
    public function get_field_value($key) {
        if (isset($_POST[ $key ])) {
            return $_POST[ $key ];
        }

        $value = "";

        switch ($key) {
            case 'post_date' :
                if ($this->get_campaign()) {
                    $value = date('F j, Y', strtotime($this->get_campaign()->post_date));
                }
                break;

            case 'end_date' :
                if ($this->get_campaign()) {
                    //$value = date('F j, Y', strtotime($this->get_campaign()->get('end_date')));
                     //* GUM code edit
                    //$value = date( 'F j, Y', strtotime($this->get_campaign()->get( 'end_date' )));
                    $end_date = get_post_meta( $this->get_campaign()->ID, '_campaign_end_date', true );
                    $value = date( 'F j, Y', strtotime($end_date));
                }
                break;

            case 'impact_goal' :
                if ($this->get_campaign()) {
                    $value = $this->get_campaign()->get('impact_goal');
                }
                break;

            case 'volunteers' :
                if ($this->get_campaign()) {
                    $value = $this->get_campaign()->get('volunteers');
                }
                break;

        }

        return $value;
    }

    public function includes(){
        include_once( PP_Toolkit()->get_path('includes') . '/abstracts/abstract-pp-campaign-field.php');
    }

}

PP_Toolkit_Campaign_Submission::init();
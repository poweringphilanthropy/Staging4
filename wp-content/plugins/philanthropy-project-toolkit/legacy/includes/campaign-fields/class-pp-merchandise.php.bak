<?php
/**
 * PP_Merchandise Class.
 *
 * @class       PP_Merchandise
 * @version     1.0
 * @author lafif <hello@lafif.me>
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}

/**
 * PP_Merchandise class.
 */
class PP_Merchandise {

    public $page = 'campaign_details';
    public $meta_key = 'merchandise';

    /**
     * Singleton method
     *
     * @return self
     */
    public static function init() {
        static $instance = false;

        if ( ! $instance ) {
            $instance = new PP_Merchandise();
        }

        return $instance;
    }

    public function __construct() {
        /**
         * Hooks
         */
        add_filter( 'charitable_campaign_submission_fields', array($this, 'register_fieldset'), 10, 2 );
        add_filter( 'charitable_form_field_template', array($this, 'custom_form_field_template'), 10, 2 );
        add_filter( 'pp_toolkit_submission_vars', array($this, 'template_row'), 10, 1 );

        // not used for now, change to filter below, the filter run after nonce validated
        // add_action( 'charitable_campaign_submission_save_page_' . $this->page, array($this, 'save_fields'), 10, 1 );
        
        /**
         * Filter below run after nonce and required fields validated.
         */
        add_filter( 'charitable_campaign_submission_values', array($this, 'change_post_values'), 10, 3 );
        add_filter( 'charitable_campaign_submission_fields_map', array($this, 'submission_fields_map'), 10, 3 );
        
        // saving meta
        // add_filter( 'charitable_campaign_submission_meta_data', array($this, 'change_meta_post_values' ), 10, 4 );
        // add_filter( 'charitable_campaign_meta_key', array($this, 'change_meta_key' ), 10, 3 );
        // add_filter( 'charitable_sanitize_campaign_meta' . $this->meta_key, array($this, 'change_meta_value' ), 10, 3 );

        // add_action( 'charitable_campaign_submission_save', array($this, 'after_all_saved'), 10, 4 );
    }

    public function register_fieldset($fields, $Charitable_Ambassadors_Campaign_Form){

        $fields['merchandise'] = array(
            'legend'        => __( 'Merchandise', 'pp-toolkit' ),
            'type'          => 'fieldset',
            'fields'        => $this->get_merchandise_fields($Charitable_Ambassadors_Campaign_Form),
            'priority'      => 80,
            'page'          => $this->page,
        );

        return $fields;
    }

    public function custom_form_field_template($template, $field){

        if($field['type'] == 'merchandises'){
            $template_name = 'form-fields/' . $field['type'] . '.php';
            $template = new Philanthropy_Charitable_Template( $template_name, false );
        }

        return $template;
    }

    public function template_row($vars){
        ob_start();

        pp_toolkit_template( 'form-fields/merchandise-row.php', array(
            'index'       => '{?}',
            'key'         => 'merchandise',
            'amount'      => '',
            'description' => '',
        ) );

        $vars['merchandise_row'] = ob_get_clean();

        return $vars;
    }

    /**
     * Meta key / array key should be same as $this->meta_key
     * @param  [type] $Charitable_Ambassadors_Campaign_Form [description]
     * @return [type]                                       [description]
     */
    public function get_merchandise_fields(Charitable_Ambassadors_Campaign_Form $form){
        $merchandise_fields = array(
            'merchandise_options'  => array(
                'type'          => 'paragraph',
                'priority'      => 22,
                'fullwidth'     => true,
                'content'       => __( 'Lorem ipsum dolor sit amet.', 'charitable-ambassadors' ),
            ),
            'merchandise' => array(
                'type'          => 'merchandises',
                'priority'      => 24,
                'fullwidth'     => true,
                // 'value'         => $this->get_value($form),
                'data_type'     => 'meta',
            ),
            'test' => array(
                'label'         => __( 'First name', 'charitable-ambassadors' ),
                'type'          => 'image-crop',
                'priority'      => 42,
                'required'      => false,
                'value'         => $this->get_value($form),
                'data_type'     => 'meta',
                'height'        => 200,
                'width'         => 600,
                'export-zoom'   => 2,
            ),
        );

        uasort( $merchandise_fields, 'charitable_priority_sort' );

        return $merchandise_fields;
    }

    public function get_value($form){
        $campaign = $form->get_campaign();
        return '';
    }

    public function change_post_values($post_data, $fields, Charitable_Ambassadors_Campaign_Form $form){


        $attach_id = pp_save_image_from_datauri($_POST['test_datauri'], 'test');
        echo $attach_id;
        echo wp_get_attachment_image( $attach_id, 'full' );

        exit();
        return $post_data;
    }

    
    public function submission_fields_map($fields, $submitted, Charitable_Ambassadors_Campaign_Form $form){
        
       

        return $fields;
    }
}

PP_Merchandise::init();